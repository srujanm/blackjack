"""
Deck object
"""

import random

"""
Global variables:

    CARD_NAMES (list of str): list of names of all cards
    CARD_VALUES (list): list of values of all cards. All values are ints except for value of 'A' which is a str
    CARDS (list of tuples(str, int)): list of tuples generated by zipping the above two lists

"""

CARD_NAMES = [str(num+2) for num in range(9)]
CARD_NAMES.extend(['J','Q','K','A'])

CARD_VALUES = [num+2 for num in range(9)]
# use a str 'A' for ace since its value can be either 1 or 11
CARD_VALUES.extend([10,10,10,'A'])

CARDS = zip(CARD_NAMES, CARD_VALUES)

class Deck:

    """Implements a deck of cards"""

    def __init__(self, card_names=CARD_NAMES, card_count=13*[4]):
        """
        Create a new deck of cards. Initialize a full deck of cards by default.

        Attributes:
            cards (dict {str, int}): dict with card names as keys and corresponding card counts as values
        
        """
        self.cards = dict(zip(card_names, card_count))

    # This function does not work yet
    # def __str__(self):
    #   # Generates a string with count of all cards in deck 
    #   result = ['Number of ' + card + ': ' + str(count) + '/n' for card, count in self.cards.items()]
    
    def no_cards(self):
        """
        Returns:
            (int): total number of cards in deck
        """
        return sum(list(self.cards.values()))


    def reveal(self):
        """
        Shows all cards in deck

        Returns:
            list(str): list of all card names in deck (with repetition)
        """
        raw_deck = []
        for card_char, card_count in self.cards.items():
            if card_count > 0:
                raw_deck.extend(card_count*[card_char])

        return raw_deck

    def draw(self):
        """
        Draws a card from deck by generating a random number between 1 and number of cards in deck

        Returns:
            str: name of drawn card

        """
        draw_no = random.randint(1,self.no_cards()+1)
        card_drawn = self.reveal()[draw_no]
        # decrement count corresponding to card_drawn in deck
        self.cards[card_drawn] -= 1

        return card_drawn
              